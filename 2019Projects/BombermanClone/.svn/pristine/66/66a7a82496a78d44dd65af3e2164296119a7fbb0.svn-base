using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class UIManager : MonoBehaviour
{
    public static UIManager Instance { get; private set; }
    [SerializeField]
    private GameObject mainMenuPanel;
    [SerializeField]
    private GameObject continuePanel;
    [SerializeField]
    private GameObject gameplayPanel;
    [SerializeField]
    private TMP_InputField passwordField;
    [SerializeField]
    private SceneData sceneData;
    [SerializeField]
    private TextMeshProUGUI wrongPass;
    [Header("Gameplay Components")]
    [SerializeField]
    private TextMeshProUGUI lifeText;
    [SerializeField]
    private TextMeshProUGUI scoreText;
    [SerializeField]
    private TextMeshProUGUI timeText;
    [SerializeField]
    private GameObject powerUpPanel;
    [SerializeField]
    private PlayerOrigin playerOrigin;
    [Space]
    [SerializeField]
    private GameObject playerDeadPanel;
    [SerializeField]
    private TextMeshProUGUI deadText;
    [SerializeField]
    private float deadTime;
    private WaitForSeconds deadDuration;
    private LevelInformation[] levelInformations;
    private float countDownTimer;
    private GameManager gameManager;
    private Animator deadAnimator;
    [Header("End Game Components")]
    [SerializeField]
    private GameObject winPanel;
    [SerializeField]
    private GameObject losePanel;
    [SerializeField]
    private TextMeshProUGUI winScore;
    [SerializeField]
    private TextMeshProUGUI loseScore;
    [SerializeField]
    private TextMeshProUGUI losePassword;


    private void Awake()
    {
        levelInformations = sceneData.levelInformations;
        InitializeSingleton();
        CustomEventSystem.PlayerDead += PlayerDead;
        CustomEventSystem.GameEnded += GameEnded;
        CustomEventSystem.UpdateGameInfo += UpdateGameplayPanel;
        deadAnimator = playerDeadPanel.GetComponent<Animator>();
        deadDuration = new WaitForSeconds(deadTime);
    }
    private void GameEnded()
    {
        winPanel.SetActive(true);
        gameplayPanel.SetActive(false);
        playerDeadPanel.SetActive(false);
        winScore.text = $"YOUR SCORE:  " + gameManager.Score.ToString();
    }

    private void PlayerDead()
    {
        if (playerOrigin.PlayerLife > 0)
        {
            StartCoroutine(ReactToDeadCoroutine());
        }
        else
        {
            int index = SceneManager.GetActiveScene().buildIndex - 1;
            losePanel.SetActive(true);
            loseScore.text = $"YOUR SCORE:  " + gameManager.Score.ToString();
            gameplayPanel.SetActive(false);
            playerDeadPanel.SetActive(false);
            losePassword.text = $"Level's Password: " + levelInformations[index].LevelPassword;

        }
        IEnumerator ReactToDeadCoroutine()
        {
            deadText.enabled = true;
            deadAnimator.SetTrigger("dead");
            playerDeadPanel.SetActive(true);
            yield return deadDuration;
            deadText.enabled = false;
            deadAnimator.SetTrigger("alive");
        }
    }
    private void OnDestroy()
    {
        CustomEventSystem.PlayerDead -= PlayerDead;
        CustomEventSystem.GameEnded -= GameEnded;
        CustomEventSystem.UpdateGameInfo -= UpdateGameplayPanel;
    }

    private void Start()
    {
        gameManager = GameManager.Instance;
        UpdateGameplayPanel();
    }
    private void InitializeSingleton()
    {
        if (Instance != null)
            Destroy(gameObject);
        else
        {
            Instance = this;
            DontDestroyOnLoad(transform.gameObject);
        }
    }

    public void StartGame()
    {
        SceneChanger.LoadTheScene(levelInformations[0].LevelName);
        Debug.Log("Starting Game");
        mainMenuPanel.SetActive(false);
        gameplayPanel.SetActive(true);
    }
    public void ContinueGame()
    {
        continuePanel.SetActive(true);
        mainMenuPanel.SetActive(false);
    }
    public void ExitGame()
    {
        Application.Quit();
    }
    public void BackToMainMenu()
    {
        continuePanel.SetActive(false);
        mainMenuPanel.SetActive(true);
    }
    public void EnterTheGame()
    {
        for (int i = 0; i < levelInformations.Length; i++)
        {
            if (passwordField.text == levelInformations[i].LevelPassword)
            {
                SceneChanger.LoadTheScene(levelInformations[i].LevelName);
                continuePanel.SetActive(false);
                gameplayPanel.SetActive(true);
                wrongPass.gameObject.SetActive(false);
            }
            else
            {
                wrongPass.gameObject.SetActive(true);
            }
        }
    }
    private void UpdateGameplayPanel()
    {
        lifeText.text = $"LIFE:" + playerOrigin.PlayerLife.ToString();
        scoreText.text = $"SCORE:  " + gameManager.Score.ToString();
    }
    public void UpdateGameTime(float countTimer)
    {
        timeText.text = $"TIME: " + countTimer.ToString("f0");
    }
    public void ToTheMainMenu()
    {
        SceneChanger.LoadTheScene("MainMenu");
        mainMenuPanel.SetActive(true);
        winPanel.SetActive(false);
        losePanel.SetActive(false);
    }
}
